

This Principle says we should have methods in the
interface that are common across all the classes that are going to implement it.

eg: We have an interface vehicle

interface vehicle{
boolean hasEngine(){
return true;
}
int wheels();
}


Now one class car is implementing the vechicle interface

class car{
@override
int wheels(){
return four;
}
}

suppose there is another class called cycle which does not have engine so it will thro exception and will lead to errors.
class cycle{
boolean hasEngine(){
throw nullPointerException;
}
int wheels(){
return 2;
}


so what we need to do is to only have common method in the interface

interface vehicle{

int wheels();
}

and

class cycle{
int wheels(){
return 2;
}


class car{
@override
int wheels(){
return four;
}
void hasEngine(){
return true;
}
}